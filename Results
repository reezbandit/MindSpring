<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MindSpring - Mental Wellness Platform</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <style>
     /* General Styles */
    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 0;
      color: #333;
      line-height: 1.6;
      background-color: #f9f9f9;
    }

    .container {
      width: 90%;
      max-width: 1200px;
      margin: 0 auto;
    }
     /* Navigation Bar */
    .navbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px 0;
      background-color: rgba(255, 255, 255, 0.9);
      position: sticky;
      top: 0;
      z-index: 1000;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .navbar .logo {
      font-size: 1.5rem;
      font-weight: 600;
      color: #2c3e50;
      animation: fadeIn 1.5s ease-in-out;
    }

    .navbar .nav-links {
      display: flex;
      gap: 20px;
    }

    .navbar .nav-links a {
      color: #2c3e50;
      transition: color 0.3s ease, transform 0.3s ease;
    }

    .navbar .nav-links a:hover {
      color: #FFB6B9;
      transform: translateY(-3px);
    }

    .navbar .btn-login {
      padding: 10px 20px;
      border-radius: 5px;
      background-color: #FFB6B9;
      color: #fff;
      transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .navbar .btn-login:hover {
      background-color: #ff9fa3;
      transform: scale(1.05);
    }
    tylesheet">
  <style>
    /* Include all previous styles from assessment.html */
    /* Add these new result-specific styles */
    .results-container {
      padding: 50px 0;
      background: linear-gradient(135deg, #A2D5F2 0%, #C7F0BD 100%);
      min-height: 100vh;
    }

    .results-card {
      background: rgba(255, 255, 255, 0.95);
      padding: 40px;
      border-radius: 15px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      max-width: 800px;
      margin: 0 auto;
      text-align: center;
    }

    .score-gauge {
      width: 200px;
      height: 200px;
      margin: 20px auto;
      border-radius: 50%;
      background: conic-gradient(
        #FFB6B9 0% 33%,
        #A2D5F2 33% 66%,
        #C7F0BD 66% 100%
      );
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
    }

    .score-number {
      font-size: 2.5em;
      color: #2c3e50;
      background: white;
      width: 160px;
      height: 160px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .score-breakdown {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin: 40px 0;
    }

    .breakdown-item {
      padding: 20px;
      background: #f5f5f5;
      border-radius: 10px;
    }

    .recommendations {
      text-align: left;
      margin-top: 30px;
      padding: 20px;
      background: #fff5f5;
      border-radius: 10px;
    }

    .btn-group {
      margin-top: 30px;
      display: flex;
      gap: 15px;
      justify-content: center;
    }

    .btn {
      padding: 12px 25px;
      border-radius: 8px;
      cursor: pointer;
      transition: transform 0.3s ease;
    }

    .btn-primary {
      background: #FFB6B9;
      color: white;
    }

    .btn-secondary {
      background: #A2D5F2;
      color: white;
    }
  </style>
</head>
<body>
   <nav class="navbar">
    <div class="container">
      <div class="logo">MindSpring</div>
      <div class="nav-links">
        <a href="index.html">Home</a>
        <a href="about.html">About Us</a>
        <a href="#" class="btn-login">Login</a>
      </div>
    </div>
  </nav>
  <div class="results-container">
    <div class="container">
      <div class="results-card">
        <h1>Your Assessment Results</h1>
        
        <!-- Score Gauge -->
        <div class="score-gauge">
          <div class="score-number" id="scoreDisplay">0</div>
        </div>

        <!-- Score Interpretation -->
        <div class="score-message" id="scoreMessage"></div>

        <!-- Breakdown Section -->
        <div class="score-breakdown" id="scoreBreakdown"></div>

        <!-- Recommendations -->
        <div class="recommendations" id="recommendations">
          <h3>Recommended Next Steps</h3>
          <ul id="recommendationsList"></ul>
        </div>

        <!-- Action Buttons -->
        <div class="btn-group">
          <div class="btn btn-primary" onclick="location.href='index.html'">Home</div>
          <div class="btn btn-secondary" onclick="location.href='assessment.html'">Retake Assessment</div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Get score from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const totalScore = parseInt(urlParams.get('score')) || 0;
    const MAX_SCORE = 55; // 11 questions √ó 5

    // Score interpretation logic
    function getScoreMessage(score) {
      if (score <= 20) return "Excellent Mental Wellbeing";
      if (score <= 30) return "Good Overall Wellness";
      if (score <= 40) return "Moderate Stress Levels";
      return "Seek Professional Support";
    }

    // Generate recommendations based on score
    function getRecommendations(score) {
      const baseRecommendations = [
        'Daily mindfulness exercises',
        'Regular physical activity',
        'Maintain consistent sleep schedule'
      ];

      if (score > 30) {
        baseRecommendations.push('Consult a mental health professional');
        baseRecommendations.push('Try journaling to track moods');
      }
      if (score > 40) {
        baseRecommendations.push('Contact crisis support hotline: Call 1800 666 666 or 122');
      }
      return baseRecommendations;
    }

    // Generate breakdown items
    function createBreakdown() {
      const categories = [
        { name: 'Emotional Wellbeing', score: Math.floor(totalScore * 0.3) },
        { name: 'Stress Levels', score: Math.floor(totalScore * 0.25) },
        { name: 'Social Wellness', score: Math.floor(totalScore * 0.2) },
        { name: 'Physical Health', score: Math.floor(totalScore * 0.25) }
      ];

      return categories.map(cat => `
        <div class="breakdown-item">
          <h4>${cat.name}</h4>
          <p>${cat.score}/15</p>
        </div>
      `).join('');
    }

    // Update DOM elements
    document.getElementById('scoreDisplay').textContent = totalScore;
    document.getElementById('scoreMessage').innerHTML = `
      <h2>${getScoreMessage(totalScore)}</h2>
      <p>Your score: ${totalScore}/${MAX_SCORE}</p>
    `;
    
    document.getElementById('scoreBreakdown').innerHTML = createBreakdown();
    
    const recommendationsList = document.getElementById('recommendationsList');
    getRecommendations(totalScore).forEach(rec => {
      const li = document.createElement('li');
      li.textContent = rec;
      recommendationsList.appendChild(li);
    });

    // Animate gauge
    const gauge = document.querySelector('.score-gauge');
    gauge.style.transform = 'rotate(0deg)';
    setTimeout(() => {
      const percentage = (totalScore / maxScore) * 100;
      const rotation = (percentage / 100) * 360;
      gauge.style.transform = `rotate(${rotation}deg)`;
    }, 500);
  </script>
</body>
</html>

<script>
  // Get score from URL
    const urlParams = new URLSearchParams(window.location.search);
    let score = parseInt(urlParams.get('score')) || 0;
    const MAX_SCORE = 55;

    // Update display
    document.getElementById('scoreDisplay').textContent = score;
    
    // Set message
    const messages = {
      20: "Excellent Mental Wellbeing üåü",
      30: "Good Overall Wellness üëç",
      40: "Moderate Stress Levels üíÜ‚Äç‚ôÇÔ∏è",
      55: "Consider Professional Support ü§ù"
    };
    
    let message = "";
    if (score <= 20) message = messages[20];
    else if (score <= 30) message = messages[30];
    else if (score <= 40) message = messages[40];
    else message = messages[55];
    
    document.getElementById('scoreMessage').innerHTML = `
      <h2>${message}</h2>
      <p>Your Score: ${score}/${MAX_SCORE}</p>
    `;

    // Add recommendations
    const recommendations = [
      'Daily breathing exercises',
      'Regular physical activity',
      '8 hours of sleep nightly'
    ];
    
    if (score > 30) recommendations.push('Talk to a counselor');
    if (score > 40) recommendations.push('Contact support hotline: 1-800-123-4567');

    const list = document.getElementById('recommendationsList');
    recommendations.forEach(item => {
      const li = document.createElement('li');
      li.textContent = item;
      list.appendChild(li);
    });

    // Animate gauge
    const gauge = document.querySelector('.score-gauge');
    setTimeout(() => {
      const degrees = (score / MAX_SCORE) * 360;
      gauge.style.transform = `rotate(${degrees}deg)`;
    }, 500);
  </script>
</body>
</html>
